package wordcount2;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;

public class WordCount2 {
	private final static LongWritable one = new LongWritable(1);
	private Text word = new Text();
	
	// Mapper is not a different with wordcount version1 
	public static class MyMapper extends Mapper<Text, Text, Text, LongWritable>{
		private final static LongWritable one = new LongWritable(1);
		private Text word = new Text();
		@Override
		protected void map(Text key, Text value, Mapper<Text, Text, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			String line = value.toString();
			StringTokenizer tokenizer = new StringTokenizer(line, "\t\r\n\f |,.()<>");
			while(tokenizer.hasMoreTokens()){
				word.set(tokenizer.nextToken().toLowerCase());
				context.write(word, one);
			}
		}
	}
	
	public static class MyReducer extends Reducer<Text, LongWritable, Text, LongWritable>{
		private LongWritable sumWritable = new LongWritable();
		
		@Override
		protected void reduce(Text key, Iterable<LongWritable> values,
				Reducer<Text, LongWritable, Text, LongWritable>.Context context) throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			long sum = 0;
			for (LongWritable val: values){
				sum += val.get();
			}
			sumWritable.set(sum);
		}
		
		
		
	}
	
}
