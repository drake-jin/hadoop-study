package topn;

import java.io.IOException;
import java.util.Comparator;
import java.util.PriorityQueue;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;

public class TopN {
	
	public static class ItemFreqComparator implements Comparator<ItemFreq>{
		@Override
		public int compare(ItemFreq x, ItemFreq y) {
			
			if (x.getFreq() < y.getFreq()){
				return -1;
			}else if (x.getFreq() > y.getFreq()){
				return 1;
			}else{
				return 0;		
			}			
		}
	}
	
	public static void insert(PriorityQueue queue, String item, Long lvalue, int topN ){
/** 
@PriorityQueue
 - 보통의 큐는 FIFO. 
 - 하지만 PriorityQueue는 들어온 순서가 아닌 다른 조건으로 큐의 순서를 결정한다.
 - Comparator 인터페이스라는 것이 순서를 결정하는 역할을 한다.
 - 새로 원소가 추가되거나 삭제될때마다 우선순위를 재 계산합니다.
 - 보통 우선순위 큐는 힙이라부르는 완전 이진트리로 구현되어있다.

@ TopN에서 사용되는 PriorityQueue를 사용하기위한 조건
 1. 레코드를 저장하는데 사용하는 클래스를 사용해야함
 2. 레코드 삽입할 때 이미 들어가 있는 레코드들 사이의 순서를 정하는 Comparator클래스를 정의해야한다.
 3. 큐의 크기를 N개로 제한하는 로직을 추가해야함. (없다면 메모리가 부족해질 때 까지 비대해질 수 있다)
 
*/
		ItemFreq head = (ItemFreq) queue.peek();
		
		//큐의 원소수가 topN보다 작거나 지금 들어온 빈도수가 큐내의 최소 빈도수보다 크면
		if(queue.size() < topN || head.getFreq() < lvalue){
			ItemFreq itemFreq = new ItemFreq(item, lvalue);
			queue.add(itemFreq);
			
			// 큐의 원소가  topN 보다 크면 가장 작은 원소를 제거한다.
			// if (queue.size() > topN && head != null && head.getFreq() < lvalue){
			// }
			if(queue.size() > topN ){
				queue.remove();
			}
		}
	}
	public static class Map extends Mapper<Text, Text, Text, LongWritable>{
		private final static LongWritable one = new LongWritable(1);
		Comparator<ItemFreq> comparator = new ItemFreqComparator();
		PriorityQueue<ItemFreq> queue = new PriorityQueue<ItemFreq>(10, comparator);
		int topN = 10;
		@Override
		protected void cleanup(Mapper<Text, Text, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			while(queue.size() != 0){
				ItemFreq item = (ItemFreq) queue.remove();
				context.write(new Text(item.getItem()), new LongWritable(item.getFreq()));
			}
		}
		@Override
		protected void map(Text key, Text value, Mapper<Text, Text, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			Long lvalue = (long) Integer.parseInt(value.toString());
			insert(queue, key.toString(), lvalue, topN);
		}
		@Override
		protected void setup(Mapper<Text, Text, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			topN = context.getConfiguration().getInt("topN", 10);
		}		
	}
	public static class Reduce extends Reducer<Text, LongWritable, Text, LongWritable>{
		Comparator<ItemFreq> comparator = new ItemFreqComparator();
		PriorityQueue<ItemFreq> queue = new PriorityQueue<ItemFreq>(10, comparator);
		int topN = 10;
		@Override
		protected void cleanup(Reducer<Text, LongWritable, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			// TODO Auto-generated method stub
			super.cleanup(context);
		}
		@Override
		protected void reduce(Text key, Iterable<LongWritable> values,
				Reducer<Text, LongWritable, Text, LongWritable>.Context arg2) throws IOException, InterruptedException {
			long sum = 0;
			for (LongWritable val : values){
				sum += val.get();
			}
			insert(queue, key.toString(), sum, topN);
		}
		@Override
		protected void setup(Reducer<Text, LongWritable, Text, LongWritable>.Context context)
				throws IOException, InterruptedException {
			topN = context.getConfiguration().getInt("topN", 10);
		}
		
		
	}
}




















