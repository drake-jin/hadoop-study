package trigram;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import trigram.TopN.Map;
import trigram.TopN.Reduce;

/**
@트라이그램이란?  
	트라이 그램이란 연속된 세 단어를 말한다. 
@What
	- 앞서만든 TopN까지 연결해서 실행하여 빈도수로 가장 큰 10개의 트라이그램을 보여주도록 프로그램을 작성할 것이다.
 	- 2개의 MapReduce잡을 연속하여 실행하는 방법  = JobChanning을 할 예정이다.
	- CountTrigram을 실행한 후 TopN을 실행할 예정
	
주어진 텍스트를 단어들의 리스트로 쪼갠 다음. 세번째 토큰을 기준으로 먼저 읽은 두 개의 단어를 별도로 유지하면서 
이 세 개의 단어를 기반으로 키를 만들어냅니다.
*/
public class CountTrigram {
	public static void main(String args[]) throws IOException, ClassNotFoundException, InterruptedException{
		// TopN과 CountTrigram을 연결하여 실행하는 코드가 들어간다.
		// 예제 프로그램의 소스 디렉토리에 복사해서 사용합니다. 
		
		Configuration conf = new Configuration();
		Job job = new Job(conf, "Count Trigram");
		
		job.setJarByClass(CountTrigram.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		
		job.setMapperClass(Map.class);
		job.setCombinerClass(Reduce.class);
		job.setReducerClass(Reduce.class);
		//컴바이너 작용 리듀서  = 컴바이너 작용
		
		job.setInputFormatClass(KeyValueTextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		//CountTrigram잡을 실행합니다.
		if (!job.waitForCompletion(true)){
			return;
		}
		
		Configuration conf2 = new Configuration();
		Job job2 = new Job(conf2,"TopN");
		
		job2.setJarByClass(TopN.class);
		job2.setOutputKeyClass(Text.class);
		job2.setOutputValueClass(LongWritable.class);
		
		job2.setMapperClass(TopN.Map.class);
		job2.setReducerClass(TopN.Reduce.class);
		job2.setNumReduceTasks(1);
	}
}
