package main;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

/**
 * @What - CountCitation 처럼 처리결과가 나오면 문서 ID로 어떤 문서가 많이 사용되었는지 알 수 없다. - 그렇기 때문에
 *       문서 ID 와 제목을 조인해서 문서의 제목이 무엇인지 알아보는 프로그램을 만들도록 한다.
 * 
 * @Source - 2M.SRCID.DSTID와 2M.TITLE.ID파일을 이용한다. - 파일이 두 개 이기 때문에
 *         MultipleInputs를 이용한다. - 두 파일의 포맷이 다르다. 2M.SRCID.DSTID는 ID와 빈도수,
 *         2M.TITLE.ID는 제목과 ID 만 나온다. - 다른 포맷의 2개 파일을 하나의 맵으로 처리하는것은 어느 파일의
 *         데이터인지 알기 어렵기 때문에 2개의 매퍼를 사용합니다.
 * 
 * @Working 1. 2개의 다른 포맷의 입력 파일들에 맞추어 2개의 맵퍼로 로드하여 리듀서로 보냅니다.
 * 
 * @Mapper 각기 다른 값을 넣음으로 써 리듀서 입장에서는 어떤 맵퍼에서 온 데이터인지 알 수 없기때문에 value에 작은 표시를 하나
 *         합니다. - 2M.TITLE.ID의 출력 데이터 [Key : 문서의 ID , Value : title +"\t"+1 1은
 *         2M.TITLE.ID에서 온 값임을 알리기 위해 - 2M.SRCID.DSTID 의 출력데이터 [Key : 문서의 ID,
 *         Value : 빈도수 +"\t"+2 2는 2M.SRCID.DSTID에서 온 값임을 알리기 위해
 * 
 * @Reducer 리듀스는 2M.ID.TITLE로부터 나온 맵의 결과와 2M.SRCID.DSTID의 결과에 대해 내부조인과 비슷한 처리를
 *          수행하게 됩니다.
 * 
 */

public class JoinIDTitle {

	public static class MyMapper1 extends Mapper<Text, Text, Text, Text> {

		@Override
		protected void map(Text key, Text value, final Mapper<Text, Text, Text, Text>.Context context)
				throws IOException, InterruptedException {
			// 2M.TITLE.ID에서 왔음을 표시하기 위해 벨류의 뒷 부분에 1을 태그한다.
			context.write(value, new Text(key+"\t"+1));
			context.getCounter("Stats", "Number of Title+Doc ID").increment(1);
		}

	}

	public static class MyMapper2 extends Mapper<Text, Text, Text, Text> {

		@Override
		protected void map(Text key, Text value, final Mapper<Text, Text, Text, Text>.Context context)
				throws IOException, InterruptedException {
			// CountCitation&TopN 에서 왔음을 표시하기 위해 벨류의 뒷 부분에 2을 태그한다.
			context.write(value, new Text(key+"\t"+2));
			context.getCounter("Stats", "CountCitation+Doc ID").increment(1);
		}

	}

	public static class MyReducer extends Reducer<Text, Text, Text, Text> {

		@Override
		protected void reduce(Text key, Iterable<Text> values, final Reducer<Text, Text, Text, Text>.Context context)
				throws IOException, InterruptedException {
			String title = null;
			String frequency = null;
			int count =0;
			
			for(Text t : values){
				String str = t.toString(); 
				String[] tokens = str.split("\\t");
				//탭 문자를 분리자로 나눈다. 두 개의 스트링이 분리되어야 하며, 두 번째 것이 1 혹은 2의 값을 갖게 된다.
				
				if(tokens[1].equals("1")){
					//1일 때	
					title = tokens[0];
				}else{
					//2일 때 
					frequency = tokens[0]; 
				}
				count++;
			}
			
			//우리가 찾는 케이스는 이런 원소가 2개 들어온 경우이며 이 경우 title과 Frequency변수는 null이 아니어야 한다.
			if(count == 2 && title != null && frequency != null){
				context.write(key, new Text(title + "\t" + frequency));
				context.getCounter("stats", "The Number of pairs of matches").increment(1);
			}
			
		}

	}

	public static void main(String[] args) throws Exception {
		Job pass = new Job();
		Configuration conf = pass.getConfiguration();

		String titleDocId = args[0]; // 2M.TITLE.ID의 위치
		String docIdFreq = args[1]; // CountCitation/TopN 처리된 결과 위치
		String outputDir = args[2]; // 출력 디렉토리

		if (titleDocId == null || docIdFreq == null || outputDir == null) {
			throw new IllegalArgumentException("Missing Parameters");
		}
		pass.setJobName("Join Id & Title ");
		pass.setJarByClass(JoinIDTitle.class);

		pass.setOutputKeyClass(Text.class);
		pass.setOutputValueClass(Text.class);

		// 아래 주석 처리한 것처럼 Mapper를 설정하는 부분이 없습니다.
		// pass.setMapperClass(MyMapper.class);
		pass.setReducerClass(MyReducer.class);
		
		
		// MultipleInputs를 사용한다면 Job객체에서 Mapper설정을 따로 하지 않아도 된다.
		// titleDocId에 있는 파일들을 읽을때는 MyMapper1.map을 맵 클래스로 사용하면서 입력포맷은 KeyValueTextInputFormat을 사용한다.
		MultipleInputs.addInputPath(pass, new Path(titleDocId), KeyValueTextInputFormat.class, MyMapper1.class);
		// CountCitation / TopN결과 파일들을 읽을 때는 MyMapper2.map을 맵 클래스로 사용하면서 입력 포맷은 KeyValueTextInputFormat을 사용합니다.
		MultipleInputs.addInputPath(pass, new Path(docIdFreq), KeyValueTextInputFormat.class, MyMapper2.class);
		
		//입력 포맷을 별도로 지정할 필요가 없습니다.
		//pass.setInputFormatClass(TextInputFormat.class);
		pass.setOutputFormatClass(TextOutputFormat.class);
		
		//입력 파일 위치도 별도로 지정할 필요가 없습니다.
		FileInputFormat.addInputPath(pass, new Path(args[0]));
		FileOutputFormat.setOutputPath(pass, new Path(outputDir));
		
		if(!pass.waitForCompletion(true)){
			System.exit(1);
		}
	}

}
